// <auto-generated />
using System;
using DDApp.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DDApp.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221120215628_DirectImagesRename")]
    partial class DirectImagesRename
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.2.22472.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DDApp.DAL.Entites.Attach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Attaches");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DDApp.DAL.Entites.Direct", b =>
                {
                    b.Property<Guid>("DirectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DirectTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDirectGroup")
                        .HasColumnType("boolean");

                    b.HasKey("DirectId");

                    b.ToTable("Directs");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.DirectMembers", b =>
                {
                    b.Property<Guid>("DirectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("DirectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DirectMembers");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.DirectMessages", b =>
                {
                    b.Property<Guid>("DirectMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DirectId")
                        .HasColumnType("uuid");

                    b.Property<string>("DirectMessage")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Sended")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("DirectMessageId");

                    b.HasIndex("DirectId");

                    b.HasIndex("SenderId");

                    b.ToTable("DirectMessages");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.PostCommentLikes", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostCommentId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "PostCommentId");

                    b.HasIndex("PostCommentId");

                    b.ToTable("PostCommentsLikes");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.PostComments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.PostLikes", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.Posts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.Subscriptions", b =>
                {
                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("SubscriberId", "SubscriptionId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.Avatar", b =>
                {
                    b.HasBaseType("DDApp.DAL.Entites.Attach");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Avatars", (string)null);
                });

            modelBuilder.Entity("DDApp.DAL.Entites.DirectDir.DirectImage", b =>
                {
                    b.HasBaseType("DDApp.DAL.Entites.Attach");

                    b.Property<Guid>("DirectId")
                        .HasColumnType("uuid");

                    b.HasIndex("DirectId")
                        .IsUnique();

                    b.ToTable("DirectImages");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.DirectFiles", b =>
                {
                    b.HasBaseType("DDApp.DAL.Entites.Attach");

                    b.Property<Guid>("DirectMessagesId")
                        .HasColumnType("uuid");

                    b.HasIndex("DirectMessagesId");

                    b.ToTable("DirectFiles");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.PostFiles", b =>
                {
                    b.HasBaseType("DDApp.DAL.Entites.Attach");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasIndex("PostId");

                    b.ToTable("PostFiles");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.Attach", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.DirectMembers", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.Direct", "Direct")
                        .WithMany("DirectMembers")
                        .HasForeignKey("DirectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDApp.DAL.Entites.User", "User")
                        .WithMany("Directs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.DirectMessages", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.Direct", "Direct")
                        .WithMany("DirectMessages")
                        .HasForeignKey("DirectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDApp.DAL.Entites.User", "User")
                        .WithMany("DirectMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.PostCommentLikes", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.PostComments", "PostComment")
                        .WithMany("PostCommentLikes")
                        .HasForeignKey("PostCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDApp.DAL.Entites.User", "User")
                        .WithMany("PostCommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.PostComments", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDApp.DAL.Entites.Posts", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.PostLikes", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.Posts", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDApp.DAL.Entites.User", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.Posts", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.Subscriptions", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.User", "UserSubscriber")
                        .WithMany("Subscribers")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDApp.DAL.Entites.User", "UserSubscription")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSubscriber");

                    b.Navigation("UserSubscription");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.UserSession", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.User", "User")
                        .WithMany("Session")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.Avatar", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.Attach", null)
                        .WithOne()
                        .HasForeignKey("DDApp.DAL.Entites.Avatar", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDApp.DAL.Entites.User", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("DDApp.DAL.Entites.Avatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.DirectDir.DirectImage", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.Direct", "DirectImg")
                        .WithOne("DirectImage")
                        .HasForeignKey("DDApp.DAL.Entites.DirectDir.DirectImage", "DirectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDApp.DAL.Entites.Attach", null)
                        .WithOne()
                        .HasForeignKey("DDApp.DAL.Entites.DirectDir.DirectImage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectImg");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.DirectFiles", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.DirectMessages", "DirectMessage")
                        .WithMany("DirectFiles")
                        .HasForeignKey("DirectMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDApp.DAL.Entites.Attach", null)
                        .WithOne()
                        .HasForeignKey("DDApp.DAL.Entites.DirectFiles", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectMessage");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.PostFiles", b =>
                {
                    b.HasOne("DDApp.DAL.Entites.Attach", null)
                        .WithOne()
                        .HasForeignKey("DDApp.DAL.Entites.PostFiles", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDApp.DAL.Entites.Posts", "Post")
                        .WithMany("PostFiles")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.Direct", b =>
                {
                    b.Navigation("DirectImage");

                    b.Navigation("DirectMembers");

                    b.Navigation("DirectMessages");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.DirectMessages", b =>
                {
                    b.Navigation("DirectFiles");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.PostComments", b =>
                {
                    b.Navigation("PostCommentLikes");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.Posts", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostFiles");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("DDApp.DAL.Entites.User", b =>
                {
                    b.Navigation("Avatar");

                    b.Navigation("DirectMessages");

                    b.Navigation("Directs");

                    b.Navigation("PostCommentLikes");

                    b.Navigation("PostLikes");

                    b.Navigation("Posts");

                    b.Navigation("Session");

                    b.Navigation("Subscribers");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
